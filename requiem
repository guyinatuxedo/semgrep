#!/bin/env python3

import os
import json
import argparse

import requiem_testcases


class Result():
    def __init__(self, result):
        self.check_id = result["check_id"]
        self.end = result["end"]
        self.path = result["path"]
        extra = result["extra"]
        self.message = extra["message"]
        self.severity = extra["severity"]


class ResultsParser():
    def __init__(self):
        self.results = []
        self.flagged_files = []
        self.rules_count = {}
        self.files_count = {}

    def add_result(self, result):
        new_result = Result(result)
        if new_result.check_id not in self.rules_count:
            self.rules_count[new_result.check_id] = 1
        else:
            self.rules_count[new_result.check_id] += 1

        if new_result.path not in self.files_count:
            self.files_count[new_result.path] = 1
        else:
            self.files_count[new_result.path] += 1

        if new_result.path not in self.flagged_files:
            self.flagged_files.append(new_result.path)
        #print(new_result.check_id)
        self.results.append(new_result)

    def run_tests(self):
        for result in self.results:
            check_id = result.check_id
            path = result.path
            key = requiem_testcases.concat(check_id, path)
            if key not in requiem_testcases.TESTCASES:
                print(key)
                raise AttributeError("Rule was flagged that wasn't defined by testcases")

            if (requiem_testcases.TESTCASES[key] <= 0):
                raise AttributeError("Rule was flagged that wasn't defined by testcases")

            current_val = requiem_testcases.TESTCASES[key]
            current_val -= 1
            requiem_testcases.TESTCASES[key] = current_val

            if current_val == 0:
                del requiem_testcases.TESTCASES[key]

        if len(requiem_testcases.TESTCASES) != 0:
            print(requiem_testcases.TESTCASES)
            raise AttributeError("Some checks were not flagged")

    def output_results(self):
        current_directory = os.getcwd()
        output_directory = current_directory + "/output_requiem" + "/"
        i = 1
        while (os.path.exists(output_directory)):

            output_directory = current_directory + "/" + "output_requiem" + "-" + str(i) + "/"
            i += 1
        os.mkdir(output_directory)
        os.chdir(output_directory)

        summary_file = open("REQUIEM_SUMMARY", "w")

        summary_file.write("\n+{:=^60}+\n".format(""))
        summary_file.write("|{:^60}|\n".format("Flagged Rules Summary"))
        summary_file.write("+{:=^60}+\n\n".format(""))
        #print("\n\nFlagged Rules Summary\n\n")

        for flagged_rule in self.rules_count.keys():
            flagged_rule_stmt = "{:<40}".format(flagged_rule)
            flagged_count = self.rules_count[flagged_rule]
            summary_file.write("%s\t:\t%d\n" % (flagged_rule_stmt, flagged_count))

        summary_file.write("\n+{:=^60}+\n".format(""))
        summary_file.write("|{:^60}|\n".format("Flagged Files Summary"))
        summary_file.write("+{:=^60}+\n\n".format(""))
        #print("\n\nFlagged Rules Summary\n\n")

        for flagged_file in self.files_count.keys():
            flagged_file_stmt = "{:<40}".format(flagged_file)
            flagged_count = self.files_count[flagged_file]
            summary_file.write("%s\t:\t%d\n" % (flagged_file_stmt, flagged_count))

        summary_file.write("\n")
        summary_file.close()

        '''
        for flagged_file in self.flagged_files:
            new_output_file = open(flagged_file.split("/")[-1], "w")

            new_output_file.write("\n+{:=^60}+\n".format(""))
            new_output_file.write("|{:^60}|\n".format("File Summary"))
            new_output_file.write("+{:=^60}+\n\n".format(""))
        '''


            new_output_file.close()

        #print(current_directory)
        #self.generate_summary()

    #def generate_summary(self):
    #    summary_file = open("summary", "w")
    #    summary_file.write("Requiem Summary:\n\n")
    #    summary_file.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-r', metavar='rules', type=str, help="The rules for Requiem to use.")
    parser.add_argument('-c', metavar='code', type=str, help="The rules for Requiem to use.")
    parser.add_argument('-t', metavar='code', type=bool, default=False, const=True, nargs="?", help="The rules for Requiem to use.")

    args = parser.parse_args()

    rules = args.r
    code = args.c
    testing = args.t

    print(testing)

    cmd = "semgrep --config=%s %s --json > output" % (rules, code)

    os.remove("output")
    os.system(cmd)

    output_file = open("output")
    json_data = output_file.read()
    data = json.loads(json_data)


    results = data["results"]

    results_parser = ResultsParser()

    for result in results:
        results_parser.add_result(result)

    if testing:
        results_parser.run_tests()

    else:
        results_parser.output_results()
    #else:
    #    cmd = "semgrep --config=%s %s > output" % (rules, code)
    #    os.system(cmd)
