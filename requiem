#!/bin/env python3

import os
import json
import argparse

import requiem_testcases


class Result():
    def __init__(self, result):
        self.check_id = result["check_id"]
        self.end = result["end"]
        self.path = result["path"]
        extra = result["extra"]
        self.message = extra["message"]
        self.severity = extra["severity"]


class ResultsParser():
    def __init__(self):
        self.results = []

    def add_result(self, result):
        new_result = Result(result)
        self.results.append(new_result)

    def run_tests(self):
        for result in self.results:
            check_id = result.check_id
            path = result.path
            key = requiem_testcases.concat(check_id, path)
            if key not in requiem_testcases.TESTCASES:
                print(key)
                raise AttributeError("Rule was flagged that wasn't defined by testcases")

            if (requiem_testcases.TESTCASES[key] <= 0):
                raise AttributeError("Rule was flagged that wasn't defined by testcases")

            current_val = requiem_testcases.TESTCASES[key]
            current_val -= 1
            requiem_testcases.TESTCASES[key] = current_val

            if current_val == 0:
                del requiem_testcases.TESTCASES[key]

        if len(requiem_testcases.TESTCASES) != 0:
            print(requiem_testcases.TESTCASES)
            raise AttributeError("Some checks were not flagged")




if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-r', metavar='rules', type=str, help="The rules for Requiem to use.")
    parser.add_argument('-c', metavar='code', type=str, help="The rules for Requiem to use.")
    parser.add_argument('-t', metavar='code', type=bool, default=False, const=True, nargs="?", help="The rules for Requiem to use.")

    args = parser.parse_args()

    rules = args.r
    code = args.c
    testing = args.t

    print(testing)

    if testing:
        cmd = "semgrep --config=%s %s --json > output" % (rules, code)

        os.remove("output")
        os.system(cmd)

        output_file = open("output")
        json_data = output_file.read()
        data = json.loads(json_data)


        results = data["results"]

        results_parser = ResultsParser()

        for result in results:
            results_parser.add_result(result)

        results_parser.run_tests()

    else:
        cmd = "semgrep --config=%s %s > output" % (rules, code)

        os.system(cmd)